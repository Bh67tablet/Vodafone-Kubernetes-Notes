
Jobs Demo:

vim jobs.yml

apiVersion: batch/v1
kind: Job
metadata:
 name: job1
spec:
 backoffLimit: 4 # number of retries that job will do to create pod upon  failure of task
 template:
  spec:
   restartPolicy: Never # if container fails, no new pod will be created
   containers:
    - name: pi
      image: perl:5.34.0
      command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]


Demo2: Jobs with paralleism and completions

apiVersion: batch/v1
kind: Job
metadata:
 name: job1
spec:
 completions: 1 # number of pods to be created as part of the job
 parallelism: 1 # number of pods running parallel
 backoffLimit: 4 # number of retries that job will do to create pod upon  failure of task
 template:
  spec:
   restartPolicy: Never # if container fails, no new pod will be created
   containers:
    - name: pi
      image: perl:5.34.0
      command: ["peasfsfrl", "-Mbsfdsfignum=bpi", "-wle", "print bpi(2000)"]

=============================

Persistent Volume:

vim pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
 name: block-pv
spec:
 storageClassName: manual
 capacity:
  storage: 1Gi
 accessModes:
  - ReadWriteOnce
 hostPath:
  path: /tmp/data


vim pvc.yml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
 name: pvc
spec:
 storageClassName: manual
 accessModes:
  - ReadWriteOnce
 resources:
  requests:
   storage: 1Gi


vim pod-pvc.yml


kind: Pod
apiVersion: v1
metadata:
 name: pod-pvc
spec:
 containers:
  - name: c1
    image: nginx
    volumeMounts:
     - mountPath: "/data"
       name: my-volume
 volumes:
  - name: my-volume
    persistentVolumeClaim:
     claimName: pvc











